import Page from '../../pages/page'
import RequestLinkPage from '../../pages/link/requestLink'
import FindRecipientPage from '../../pages/barcode/findRecipient'
import assertPageMeetsAccessibilityStandards from '../../support/accessibilityHelper'

context('Verify Link', () => {
  beforeEach(() => {
    cy.task('reset')
    cy.task('stubAuthToken')
    cy.task('stubVerifyLink')
  })

  afterEach('Rendered page should meet accessibility standards', () => {
    assertPageMeetsAccessibilityStandards()
  })

  it('should redirect to Find Recipient page', () => {
    cy.visit('/link/verify-link?secret=a-valid-secret')

    const findRecipientPage = Page.verifyOnPage(FindRecipientPage)
    findRecipientPage.errorsList().should('not.exist')
    findRecipientPage.signOut().should('exist')
    findRecipientPage.userName().should('contain', 'mike.halma@digital.justice.gov.uk')
  })

  it('should redirect to Request List page if visiting without a value for the `secret` querystring param', () => {
    cy.visit('/link/verify-link')

    Page.verifyOnPage(RequestLinkPage).errorsList().should('not.exist')
  })

  it('should redirect to Request List page if visiting with a `secret` that has not been generated by our Request A Link process', () => {
    cy.task('stubVerifyLinkNotFoundFailure')
    cy.visit('/link/verify-link?secret=a-bogus-secret')

    Page.verifyOnPage(RequestLinkPage).errorsList().should('contain', 'Request a new one')
  })

  it('should redirect to Request List page if visiting with a `secret` that returns a token with an invalid signature', () => {
    cy.task('stubVerifyLinkInvalidSignatureFailure')
    cy.visit('/link/verify-link?secret=a-valid-secret-whose-token-has-an-invalid-signature')

    Page.verifyOnPage(RequestLinkPage).errorsList().should('contain', 'Request a new one')
  })
})
